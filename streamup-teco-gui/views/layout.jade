doctype html
html
	head
		link(rel='stylesheet', href='css/bootstrap.css')
		link(rel='stylesheet', href='css/docs.min.css')
		link(rel='stylesheet', href='css/dashboard.css')		
		link(rel='stylesheet', href='css/streamup.css')
		link(rel='stylesheet', href='css/select2.css')
		link(rel='stylesheet', href='css/select2-bootstrap.css')			
		script(src='/js/jquery-1.11.3.min.js')
		script(src='/js/handlebars-v3.0.3.js')		
		script(src='/js/bootstrap.min.js') 
		script(src='/js/n3-browser.js')
		script(src='/js/select2.js')
		script(src='//cdn.jsdelivr.net/g/es6-promise@1.0.0')
		script(src='//cdnjs.cloudflare.com/ajax/libs/jsonld/0.3.15/jsonld.js')
		script(src='js/jquery.flot.js')
		script(src='js/jquery.flot.time.js')
		script(src='/js/streamup.js')
		script(type='text/x-handlebars-template' id="responseTemplate").
			<div id="responseStatus" class="alert" role="alert"><b>Status</b>     {{status.code}} - {{status.text}}</div>
			<div id="representationType">      
				<ul class="nav nav-pills">
					<li id="tab-table" role="presentation" onclick="switchToTab(this)"><a href="#!">Table</a></li>
					<li id="tab-rdf" role="presentation" onclick="switchToTab(this)"><a href="#!">RDF</a></li>
					<li id="tab-chart" role="presentation" onclick="switchToTab(this)"><a href="#!">Chart</a></li>
					<li id="tab-response" role="presentation" onclick="switchToTab(this)"><a href="#!">Response</a></li>
				</ul>
			</div>
			<div id="representationContent">
				<div id="view-table" style="display:none"></div>
				<div id="view-rdf" style="display:none"></div>
				<div id="view-chart" style="display:none"></div>
				<div id="view-response" style="display:none"></div>
			</div>
		script(type='text/x-handlebars-template' id="template-table").
			<table class="table table-striped">        
				<thead>
					{{#tableheaders}}
				<th>
					{{this}}
				</th>
					{{/tableheaders}}
				</thead>
				<tbody>
					{{#triples}}
					<tr>
						{{#each this}}
						<td>{{json this}}</td>
						{{/each}}
					</tr>   
					{{/triples}}         
				</tbody>
			</table>
		script(type='text/x-handlebars-template' id="template-rdf").
			<div style="padding-left: 15px;padding-top:10px">
				<div id="rdf-type" align="left" stlye="display:inline-block;" class="input-group-btn">    
					<button type="button" data-toggle="dropdown" class="btn btn-default dropdown-toggle">SPO Triples<span class="caret"></span></button>
					<ul class="dropdown-menu pull-left">
						<li><a href="#!" data-value="application/ld+json">JSON-LD</a></li>
						<li><a href="#!" data-value="application/rdf+xml">RDF/XML</a></li>
						<li><a href="#!" data-value="text/turtle">TURTLE</a></li>
						<li><a href="#!" data-value="application/n-triples">N-Triples</a></li>
						<li><a href="#!" data-value="application/spo+json">SPO Triples</a></li>
					</ul>
				</div>
			</div>
			<div class="panel-body">
				<pre id="rdf-display">{{json RDF 2}}</pre>
			</div>
			<scr{{!}}ipt>$(function(){                  
				$("#rdf-type").find("li a").click(function(){
					var format =  $(this).data('value');    
					// change RDF format
					changeRDFFormat(format);
					$(this).parents(".input-group-btn").find('.btn').html($(this).text() + '<span class="caret"></span>');
				});
			});</scr{{!}}ipt>
		script(type='text/x-handlebars-template' id="template-chart").
			<div class="none" id="placeholder-chart" style="width:600px;height:300px"></div>  
			<scr{{!}}ipt>$(function() {    
			var response = JSON.parse(window.data.response);
			// map data to correct format
			// timestampe * 1000 ???
			// if data is JSON object then plot series for each property

			/*var data = response.map(function(entry) {
			  return [entry.timestamp * 1000, entry.value];
			});*/
			var data = [];
			if (response && response.length > 0) {
				for (var i = 0; i < response.length; i++) {			
					if(typeof response[i].value === 'object') {
						Object.keys(response[i].value).forEach(function(key) {
							var seriesData = data.find(function(series) { return series.label == key; });
							if (!seriesData) {
								seriesData = { label: key, data: []};	
								data.push(seriesData);
							}			
							seriesData.data.push([response[i].timestamp*1000, response[i].value[key]]);
						})
					} else {
						data[0].data.push([response[i].timestamp*1000, response[i].value]);
					}
				}
			}
			plot = $.plot("#placeholder-chart", data, 
				{
					series: {
						shadowSize: 0,
						lines: { show: true },
						points: { show: true }
					},
					xaxis: { mode: "time", timeformat: "%H:%M:%S" },
					grid: 
						{
							hoverable: true,
							autoHighlight: true
						}
				}
			);
			$("#placeholder-chart").bind("plothover", function (event, pos, item) {       
				var context = $('#placeholder-chart .flot-overlay')[0].getContext('2d');        
				if (item) {
					var offset = $($('#placeholder-chart .flot-overlay')[0]).offset();
					var relativPos = {x: item.pageX - offset.left, y: item.pageY - offset.top};
					context.fillText(item.datapoint[1], relativPos.x + 5, relativPos.y - 10);
				}
			});
			});</scr{{!}}ipt>
		script(type='text/x-handlebars-template' id="template-response").
			<div class="panel-group" id="accordion">
				<div class="panel panel-default">
					<div class="panel-heading">
						<h4 class="panel-title">
							<a data-toggle="collapse" data-parent="#accordion" href="#collapseOne">Headers</a>
						</h4>
					</div>
					<div id="collapseOne" class="panel-collapse collapse">
						<div class="panel-body">
							{{headers}}
						</div>
					</div>
				</div>
				<div class="panel panel-default">
					<div class="panel-heading">
						<h4 class="panel-title">
							<a data-toggle="collapse" data-parent="#accordion" href="#collapseTwo">Response body</a>
						</h4>
					</div>
					<div id="collapseTwo" class="panel-collapse collapse in">
					<div class="panel-body">
						<pre>{{response}}</pre>
					</div>
					</div>
				</div>              
			</div>
		script.
			function navigate(dest) {
				window.location.href = dest + '?host=' + document.getElementById("serverHost").value + '&port=' + document.getElementById("serverPort").value;
			}

			function transform_response(response, callback) {
				response.response = JSON.stringify(JSON.parse(response.response), null, 2);
				callback(null, response);
			}

			function changeRDFFormat(format) {          
				formatTriples(data.triples, format, function(err, rdf) {        
					//$("#rdf-display").text(JSON.stringify(rdf));
					if (!(Object.prototype.toString.call(rdf) === '[object String]')) { 
						rdf = JSON.stringify(rdf, null, 2);
					}
					data.RDF = rdf;
					$("#rdf-display").text(rdf);
				});
				return false;
			}

			function transform_rdf(response, callback) {
				var triples = response.triples;
				if (!triples) {
					var rdf = response.response;
					var format = response.contentType;
					if (format == "application/json") {
						rdf = JSON.parse(rdf);
					}
					parseRdfAsTriples(rdf, format, function(err, asTriples) {
						response.triples = asTriples;
						triples = asTriples;          
					});
				}
				var format = $("#rdf-type > .dropdown-menu > li > a:contains('" + $("#rdf-type > .dropdown-toggle").text() + "')").data('value');
				formatTriples(triples, format, function(err, rdf) {
					response.RDF = rdf;
					callback(null, response)
				});
			}

			function transform_table(response, callback) {  
				triples = JSON.parse(response.response);
				var headers = [];
				if (triples && triples.length >= 1) {
					for (var property in triples[0]) {
						if (triples[0].hasOwnProperty(property)) {
							headers.push(property);
						}
					}
				} 
				response.tableheaders = headers;
				response.triples = triples;      
				callback(null, response);
			}

			function capitalizeFirstLetter(string) {
				return string.charAt(0).toUpperCase() + string.slice(1);
			}

			function switchToTab(newTab) {     
				newTab = $(newTab);
				// deactive all tabs
				$('#representationType>ul').children('li').each(function() {
					$(this).removeClass('active');
				});
				// active new tab
				newTab.addClass('active');
				// new corresponding content view for new tab      
				var newTabName = newTab.attr('id').substring(newTab.attr('id').indexOf('-'));
				var newDiv = $('#view' + newTabName);
				// hide all content views
				$('#representationContent').children('div').each(function() {
					$(this).hide();
				});
				// check if function for parsing data for new view is present (by magic naming convention)
				var transformDataFunc = window['transform_' + newTabName.substring(1)];
				if (typeof transformDataFunc == 'function') {
					transformDataFunc(data, function(err, newData) {
						// load new view template and populate it with data
						loadTemplateToPlaceholder("template" + newTabName, newData, "view" + newTabName);
						data = newData;
						// show new content view
						newDiv.show();            
					});
				} else {
					// load new view template and populate it with data
					loadTemplateToPlaceholder("template" + newTabName, data, "view" + newTabName);
					// show new content view
					newDiv.show();            
				}
				return false;
			}

			function loadTemplateToPlaceholder(template, data, placeholder) {
				// try to find placeholder      
				if (Object.prototype.toString.call(placeholder) === '[object String]') {
					placeholder = $('#' + placeholder);//document.getElementById(placeholder);
				}
				if (!placeholder || typeof placeholder == 'undefined') {
					placeholder = $('#triples-placeholder');//document.getElementById("triples-placeholder");
				}
				// if non found don't do anything
				if (!placeholder || typeof placeholder == 'undefined') {
					return;
				}      
				// get template and compile
				var template = Handlebars.compile(document.getElementById(template).textContent);    
				// set data to template and show in placeholder
				placeholder.html(template(data));  
			}


			function displayHttpResponse(response, placeholder, options) {      
				// get needed content from response
				options = options || { tabs: {}};
				data = { 
					status : {  code: response.status,
											text: response.statusText
									},
					headers : response.getAllResponseHeaders(),
					contentType: response.getResponseHeader("Content-Type"),
					response: response.responseText
				};
				Handlebars.registerHelper('json', function(context, indent, options) {
					if (indent) {
						return JSON.stringify(context, null, indent);
					}
					return JSON.stringify(context);
				});
				loadTemplateToPlaceholder("responseTemplate", data, placeholder);
				// set css class to emphasize HTTP result
				if (response.status == 200) {
					$('#responseStatus').addClass('alert-success');
				} else {
					$('#responseStatus').addClass('alert-danger');
				}
				// handle options
				// options.tabs.disable = all tabs that should be disabled
				if (options.tabs.disable) {
					options.tabs.disable.forEach(function(tab) {
						$('#tab-' + tab).hide();
					})
				}
				options.tabs.initial = options.tabs.initial ||  'table';
				// options.tabs.initial = tab to display after this method has been called
				switchToTab($('#tab-' + options.tabs.initial), data);      
			} 
		block header

	body
		nav.navbar.navbar-inverse.navbar-fixed-top
			.navbar-header
				a.navbar-brand(href='/')
					| StreamUp GUI
			#navbar.navbar-collapse.collapse
				form.navbar-form(style="margin-left:16.5%;color:#9d9d9d")
					b
						| HOST
					input#serverHost.form-control(value='#{host}', type='text', style="width:300px;margin-left:10px;margin-right:25px")
					b
						| PORT
					input#serverPort.form-control(value='#{port}', type='text', style="width:100px;margin-left:10px")

		.container-fluid
			.row
				.col-sm-3.col-md-2.sidebar
					ul.nav.nav-sidebar
						li#createDevice
							a(href='#' onclick='navigate("createDevice")') create device
						li#createSensor
							a(href='#' onclick='navigate("createSensor")') create sensor            
						li#insertValues
							a(href='#' onclick='navigate("insertValues")') insert values
						li#getValues
							a(href='#' onclick='navigate("getValues")') get values
						li#query
							a(href='#' onclick='navigate("query")') query
				.col-sm-9.col-sm-offset-3.col-md-10.col-md-offset-2.main
					#content.row.placeholders
						block content
			script.
				if (window.hasOwnProperty('activelink')) {
					document.getElementById('#{activelink}').className += "active";
				}	
				if ($('#serverHost').val() == 'undefined') {
					$('#serverHost').val('localhost');
				}
				if ($('#serverPort').val() == 'undefined') {
					$('#serverPort').val('8080');
				}

