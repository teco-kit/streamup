extends layout

block content
  h1.page-header Introduction
  br
  div(style="text-align:left")
    h2 Table of Contents
    ul(style="font-size: 16px;line-height: 1.6;")
      li 
        a(href="#WhatIsStreamUp")
          | What is StreamUp?
      li 
        a(href="#HowToUse")
          | How to use this demo / Example
          ul(style="font-size: 16px;line-height: 1.6;")
            li 
              a(href="#Example-createDevice")
                | create device
            li 
              a(href="#Example-createSensor")
                | create Sensor
            li 
              a(href="#Example-insertValues")
                | insert values
            li 
              a(href="#Example-getValues")
                | get values
            li 
              a(href="#Example-query")
                | query               
      li 
        a(href="#RESTAPI")
          | REST-API
          ul(style="font-size: 16px;line-height: 1.6;")
            li 
              a(href="#REST-createDevice")
                | create device
            li 
              a(href="#REST-createSensor")
                | create Sensor
            li 
              a(href="#REST-insertValues")
                | insert values
            li 
              a(href="#REST-getValues")
                | get values
            li 
              a(href="#REST-query")
                | query           
    br
    br
    a(name="WhatIsStreamUp")
    .panel.panel-default
      .panel-heading
        h3.panel-title 
          b
            | What is StreamUp?
      .panel-body        
        | StreamUp is a JavaScript-based library for managing sensor metadata and readings. It combines the descriptive power of a semantic database for managing the sensor metadata and the power of a 
        | time series database for handling large amount of sensor readings. It can be used as a Node.js server-side project or as a client-side JavaScript library by using browserify. 
        | This demo uses a server-side REST-based interface together with a nice web-frontend.
        br
        | StreamUp is agnostic to the semantic database, time series database and ontology used. This concrete demonstration uses 
        a(href='https://github.com/mcollina/levelgraph') LevelGraph
        |  as semantic database and 
        a(href='https://github.com/binocarlos/lem') LemDB
        |  as time series store implementation. As ontology a custom made ontology called TECO ontology is used.
    br
    a(name="HowToUse")
    .panel.panel-default
      .panel-heading
        h3.panel-title 
          b
            |How to use this demo / Example
      .panel-body
        | In the TECO ontology used in this demo sensors are hierarchically clustered by the devices they belong to. Therefore, the first neccessary step to create a sensor is to create the corresponding device. 
        | Each device is described by a unique 
        em deviceId
        |  of type string. As optional parameter a detailed semantic description of the sensor can be passed.
        br
        | After the device is created the different sensors can be created by passing a 
        em sensorId
        |  and again a detailed semantic description of the sensor as optional parameter.
        br
        br
        | As an example assume we have a µPart sensor
        | [ 
        a(href='http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.299.664&rep=rep1&type=pdf') 1
        | , 
        a(href='http://particle.teco.edu/devices/index.html') 2
        |  ] like shown in this picture with a sensor for movement, light and temperature.
        br
        img(src="img/upart.jpg" height="200" width="200") 
        br
        br
        a(name="Example-createDevice")
        h4 1. Create device
        hr(style="margin: 10px auto;")
        | We want to manage this sensor and it's reading with StremaUp. So, first of all, we have to create the device corresponding to the µPart. We also want to feed some metadata of the µPart 
        | (like its location or which artifact it is attatched to) to the system so that we later can find sensors e.g. by location. To achieve this we navigate to the 
        a(href='#' onclick='navigate("createDevice")') create device
        |  page and enter the following data:
        br
        table
          tr
            td(style="padding-right: 30px;vertical-align: top;")
              | deviceId: 
            td(style="padding-bottom: 20px")
              | abc:def:0000:0001 
              i // the identification of the µPart          
          tr
            td(style="padding-right: 30px;vertical-align: top;")
              | metadata:
            td
              :escape
                <?device> <http://www.teco.edu/smartteco/locatedAt> <http://www.teco.edu/smartteco/ConferenceRoom> .              
              br 
              :escape
                <?device> <http://www.teco.edu/smartteco/attachtedTo> <http://www.teco.edu/smartteco/DoorConferenceRoom> .
              br 
              :escape
                <?device> <http://www.w3.org/2003/01/geo/wgs84_pos#lat> "49.01281"^^<http://www.w3.org/2001/XMLSchema#double> .
              br 
              :escape
                <?device> <http://www.w3.org/2003/01/geo/wgs84_pos#long> "8.42405"^^<http://www.w3.org/2001/XMLSchema#double> .                

        br
        br
        | We can use the ?device variable to reference the auto-generated URI of the device.
        br
        | As result we get the device description as RDF generated by StreamUp:
        br
        br
        i
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.teco.edu/smartteco/Device>.
          br
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001> <http://www.teco.edu/smartteco/hasID> "abc:def:0000:0001"^^<http://www.w3.org/2001/XMLSchema#string>.
          br
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001> <http://www.teco.edu/smartteco/locatedAt> <http://www.teco.edu/smartteco/ConferenceRoom>.
          br
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001> <http://www.teco.edu/smartteco/attachtedTo> <http://www.teco.edu/smartteco/DoorConferenceRoom>.
        br
        br
        a(name="Example-createSensor")
        h4 2. Create sensor
        hr(style="margin: 10px auto;")
        | Next, we want to create the sensors that are present at the µPart. We also want to model the sensor metadata (like unit of measurement, precision and so on) using the 
        a(href='http://www.w3.org/DesignIssues/LinkedData.html') Linked Open Data principles
        | . Therefore we navigate to the 
        a(href='#' onclick='navigate("createSensor")') create sensor
        |  page. As device we choose the just created device with the ID abc:def:0000:0001 from the dropdown. In addition we enter the following data into the form:
        br
        br
        table
          tr
            td(style="padding-right: 30px;vertical-align: top;")
              | sensorId: 
            td(style="padding-bottom: 20px")
              | temperature
              i // the identification of the concrete sensor of the µPart          
          tr
            td(style="padding-right: 30px;vertical-align: top;")
              | metadata:
            td
              :escape
                <?sensor> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.teco.edu/smartteco/TemperatureSensor> .
              br 
              :escape
                <?sensor> <http://www.teco.edu/smartteco/hasUnitOfMeasurement> <http://purl.oclc.org/NET/muo/ucum/unit/temperature/degree-Celsius> .          
              br
              :escape
                <?sensor> <http://purl.oclc.org/NET/ssnx/ssn#observes> <http://purl.oclc.org/NET/ssnx/qu/dim#Temperature> .
        br
        | We can use the ?sensor variable to reference the auto-generated URI of the sensor. 
        br
        | To describe the unit of measurement of the sensor we reference the 
        a(href='http://idi.fundacionctic.org/muo/muo-vocab.html') Measurement Units Ontology
        | . In the last line we specify that our sensor observes (defined as by 
        a(href='http://www.w3.org/2005/Incubator/ssn/ssnx/ssn#observes') Semantic Sensor Network Ontology (SSN)
        |  ) the physical quantity temperature as defined by the 
        a(href='http://www.w3.org/2005/Incubator/ssn/ssnx/cf/cf-feature.html#Temperature') Climate and Forecast features Ontology
        | .
        br
        | As result we get the sensor description as RDF generated by StreamUp:
        br
        br
        i
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001> <http://www.teco.edu/smartteco/hasSensor> <http://www.teco.edu/smartteco/devices/abc:def:0000:0001/sensors/temperature>.
          br
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001/sensors/temperature> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.teco.edu/smartteco/Sensor>.
          br
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001/sensors/temperature> <http://www.teco.edu/smartteco/hasID> "temperature"^^<http://www.w3.org/2001/XMLSchema#string>.
          br
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001/sensors/temperature> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.teco.edu/smartteco/TemperatureSensor>.
          br
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001/sensors/temperature> <http://www.teco.edu/smartteco/hasUnitOfMeasurement> <http://purl.oclc.org/NET/muo/ucum/unit/temperature/degree-Celsius>.
          br
          :escape
            <http://www.teco.edu/smartteco/devices/abc:def:0000:0001/sensors/temperature> <http://purl.oclc.org/NET/ssnx/ssn#observes> <http://purl.oclc.org/NET/ssnx/qu/dim#Temperature>.
        br
        br
        a(name="Example-insertValues")
        h4 3. Insert values for sensor
        hr(style="margin: 10px auto;")
        | Now we want to manually insert a sensor reading, therefore we navigate to the 
        a(href='#' onclick='navigate("insertValues")') insert values
        |  page. There we select our device from the dropdown and afterwards the sensor. The field value must be filled. With the date picker component we can choose a when the value was sensed. 
        | If no date is specified the server takes the current timestamp which can be seen in the result.
        br
        br
        a(name="Example-getValues")
        h4 4. Get values for sensor
        hr(style="margin: 10px auto;")
        | We now want to query the avaibale sensor reading for a specific sensor. So we navigate to the
        a(href='#' onclick='navigate("getValues")') get values
        |  page where we choose the device and sensor via the dropdowns. By selecting a start and/or end date we can specify any time interval. To get all sensor values simply don't specify a start and end date. 
        br
        br
        a(name="Example-query")
        h4 5. Querying the metadata
        hr(style="margin: 10px auto;")
        | On the 
        a(href='#' onclick='navigate("query")') query
        |  page we can formulate any query on the metadata by specifying triple patterns. A sample query would be to list all devices with their location and sensors with their unit of measurement and observed feature.
        | This can be done with this query:
        br
        br
        i
          :escape
            ?device <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.teco.edu/smartteco/Device>.
          br
          :escape
            ?device <http://www.teco.edu/smartteco/hasSensor> ?sensor.
          br
          :escape
            ?device <http://www.teco.edu/smartteco/locatedAt> ?location.
          br
          :escape
            ?sensor <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.teco.edu/smartteco/Sensor>.
          br
          :escape
            ?sensor <http://www.teco.edu/smartteco/hasUnitOfMeasurement> ?unit.
          br
          :escape
            ?sensor <http://purl.oclc.org/NET/ssnx/ssn#observes> ?observedFeature.
    br
    a(name="RESTAPI")
    .panel.panel-default
      .panel-heading
        h3.panel-title 
          b
            | REST-API
      .panel-body
        a(name="REST-createDevice")
        h4 create device
        hr(style="margin: 10px auto;")
        table.inputTable(style="border-collapse:separate; border-spacing:1em;")
          tr
            td 
              b method
            td POST
          tr
            td 
              b URL
            td http://[host]:[port]/devices/create            
          tr
            td(valign="top") 
              b example
            td 
              pre#createDeviceJSON.
          tr
            td 
              b deviceId
            td The ID of the device of type string (must be unique).
          tr
            td(valign="top") 
              b format
            td (optional) The encoding format of the metadata. Must be one of 
              em application/n-triples
              | , 
              em text/turtle
              | , 
              em application/trig
              | , 
              em application/ld+json
              | , 
              em application/rdf+xml
              | , 
              em application/spo+json
              | .
          tr
            td 
              b metadata
            td The metadata to insert for this device. 
              em ?device
              |  can be used as variable for the generated device URI.
        br
        br
        a(name="REST-createSensor")
        h4 create sensor
        hr(style="margin: 10px auto;")
        table.inputTable(style="border-collapse:separate; border-spacing:1em;")
          tr
            td 
              b method
            td POST
          tr
            td 
              b URL
            td http://[host]:[port]/sensors/create            
          tr
            td(valign="top") 
              b example
            td 
              pre#createSensorJSON.
          tr
            td 
              b deviceId
            td The ID of the device of type string (device must already exist).
          tr
            td 
              b sensorId
            td The ID of the sensor of type string (must be unique for the device).
          tr
            td(valign="top") 
              b format
            td (optional) The encoding format of the metadata. Must be one of 
              em application/n-triples
              | , 
              em text/turtle
              | , 
              em application/trig
              | , 
              em application/ld+json
              | , 
              em application/rdf+xml
              | , 
              em application/spo+json
              | .
          tr
            td 
              b metadata
            td The metadata to insert for this sensor. 
              em ?device
              | /
              em ?sensor
              |  can be used as variable for the generated device/sensor URI.
        br   
        br
        a(name="REST-insertValues")
        h4 insert values
        hr(style="margin: 10px auto;")        
        table.inputTable(style="border-collapse:separate; border-spacing:1em;")
          tr
            td 
              b method
            td PUT
          tr
            td 
              b URL
            td http://[host]:[port]/devices/[deviceId]/sensors/[sensorId]/values
          tr
            td(valign="top") 
              b example
            td 
              pre#insertValuesJSON.
          tr
            td 
              b value
            td The value to store (of type string). 
          tr
            td(valign="top") 
              b timestamp
            td (optional) A timestamp as unix time (in seconds from 1/1/1970 UTC). If not provided it will be generated on server-side as the current timestamp.          
        br   
        br
        a(name="REST-getValues")
        h4 get values
        hr(style="margin: 10px auto;")
        table.inputTable(style="border-collapse:separate; border-spacing:1em;")
          tr
            td 
              b method
            td GET
          tr
            td 
              b URL
            td http://[host]:[port]/devices/[deviceId]/sensors/[sensorId]/values?start=[start]&end=[end]
          tr
            td(valign="top") 
              b example
            td 
              pre#getValuesJSON.
                GET http://localhost:8080/devices/abc:def:0000:0001/sensors/temperature/values?start=1436257620&end=1435739220
          tr
            td 
              b start
            td (optional) Timestamp as unix time (in seconds from 1/1/1970 UTC).
          tr
            td 
              b end
            td (optional) Timestamp as unix time (in seconds from 1/1/1970 UTC).
        br   
        br
        a(name="REST-query")
        h4 query
        hr(style="margin: 10px auto;")        
        b
          | For SELECT queries
        table.inputTable(style="border-collapse:separate; border-spacing:1em;")
          tr
            td 
              b method
            td GET
          tr
            td 
              b URL
            td http://[host]:[port]/query
          tr
            td(valign="top") 
              b example
            td 
              pre#querySelectJSON.
          tr
            td 
              b type
            td Must be 
              em SELECT
              |  for a select query. Alternatives are 
              em CONSTRUCT
              | .
          tr
            td 
              b variables
            td (optinal) The variables from the query to be returned. If not specified all variables are return. Variable names must start with a
              em ?
              |  and must follow the 
              a(href='http://www.w3.org/TR/rdf-sparql-query/#rVARNAME') SPARQL grammar 
              | .
          tr
            td 
              b tripels
            td An array of triple object of the form               
              em {subject: '', predicate: '', object: ''}              
              |  where each part can be an URI or a variable a specified above.
        br
        br
        b
          | For CONSTRUCT queries
        table.inputTable(style="border-collapse:separate; border-spacing:1em;")
          tr
            td 
              b method
            td GET
          tr
            td 
              b URL
            td http://[host]:[port]/query
          tr
            td(valign="top") 
              b example
            td 
              pre#queryConstructJSON.
          tr
            td 
              b type
            td Must be 
              em CONSTRUCT
              | .
          tr
            td 
              b template
            td An array of triple of the form
              em {subject: '', predicate: '', object: ''}
              |  that specify how the resulting triples should be constructed.
          tr
            td 
              b tripels
            td An array of triple object of the form               
              em {subject: '', predicate: '', object: ''}              
              |  where each part can be an URI or a variable a specified above.          
          tr
            td 
              b frame
            td (optiona) A JSON-LD frame specifying how the returned triples should be formatted.
        br   
        script.
          var createDevice = {  "deviceId":"abc:def:0000:00012",
                                "format":"application/n-triples",
                                "metadata":"<?device> <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://www.teco.edu/smartteco/µPart> .<?device> <http://www.teco.edu/smartteco/locatedAt> <http://www.teco.edu/smartteco/ConferenceRoom> .<?device> <http://www.teco.edu/smartteco/attachtedTo> <http://www.teco.edu/smartteco/DoorConferenceRoom> .<?device> <http://www.w3.org/2003/01/geo/wgs84_pos#lat> \"49.01281\"^^<http://www.w3.org/2001/XMLSchema#double> .<?device> <http://www.w3.org/2003/01/geo/wgs84_pos#long> \"8.42405\"^^<http://www.w3.org/2001/XMLSchema#double> ."
                             };
          var createSensor = {  "deviceId":"abc:def:0000:0001",
                                "sensorId":"temperature",
                                "format":"application/n-triples",
                                "metadata":"<?sensor> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.teco.edu/smartteco/TemperatureSensor> .<?sensor> <http://www.teco.edu/smartteco/hasUnitOfMeasurement> <http://purl.oclc.org/NET/muo/ucum/unit/temperature/degree-Celsius> .<?sensor> <http://purl.oclc.org/NET/ssnx/ssn#observes> <http://purl.oclc.org/NET/ssnx/qu/dim#Temperature> ."};
          var insertValues = [{"value":"90.0","timestamp":1435824000},
                              {"value":"100.10","timestamp":1435825000}];
          var querySelect = { "type":"SELECT",
                              "variables":["?subject","?predicate","?object"],
                              "triples":[{"subject":"?subject","predicate":"?predicate","object":"?object"}]
                            };
          var queryConstruct = {
                                "type":"CONSTRUCT",
                                "template":[{"subject":"?sensor","predicate":"http://www.teco.edu/smartteco/isPartOf" ,"object":"?device"}],
                                "triples":[{"subject":"?device","predicate":"http://www.w3.org/1999/02/22-rdf-syntax-ns#type","object":"http://www.teco.edu/smartteco/Device"},{"subject":"?device","predicate":"http://www.teco.edu/smartteco/hasSensor","object":"?sensor"},{"subject":"?sensor","predicate":"http://www.w3.org/1999/02/22-rdf-syntax-ns#type","object":"http://www.teco.edu/smartteco/Sensor"}]
                              };
          $('#createDeviceJSON').text(JSON.stringify(createDevice, null, 2));
          $('#createSensorJSON').text(JSON.stringify(createSensor, null, 2));
          $('#insertValuesJSON').text(JSON.stringify(insertValues, null, 2));
          $('#querySelectJSON').text(JSON.stringify(querySelect, null, 2));
          $('#queryConstructJSON').text(JSON.stringify(queryConstruct, null, 2));
    br      
   
        
